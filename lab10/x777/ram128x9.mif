-- Copyright (C) 2018  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details.

-- Quartus Prime generated Memory Initialization File (.mif)

WIDTH=9;
DEPTH=128;

ADDRESS_RADIX=UNS;
DATA_RADIX=OCT;

CONTENT BEGIN
	%  write Hex5 = 5 %
	0    :   100 005 150 405 505; 


	% loop(r5): R1=1,R2=outer_n,R3=inner_n,R5=n %
	5    : 150 011 170 127;
	9    : 150 015 170 127;

	% call: clearAllHex(): and go back to line 24 %
	% R6 = x, PC goto 100 %
	13	: 160 022 170 162 000;
	
	%  write Hex4 = 4 %
	18 : 100 004 150 404 505; %n+5%
	
	% loop(r5): %
	23    : 150 033 170 127;
	27    : 150 037 170 127;
	
	% call: clearAllHex(): and go back to line 24 %
	% R6 = x, R5 = 100, PC goto 100 %
	31	: 160 044 170 162 000;
	
	%  write Hex3 = 3 %
	36 : 100 003 150 403 505; %%
	
	%     loop():     	%
	41    : 150 055 170 127;
	45    : 150 061 170 127;
	
	% call: clearAllHex(): and go back to line 24 %
	% R6 = x, R5 = 100, PC goto 100 %
	49	: 160 066 170 162 000;

	% write Hex2 = 2 %
	54 : 100 002 150 402 505; %66%
	
	% loop():         	%
	59    : 150 077 170 127;
	63    : 150 103 170 127;

	% clearAllHex():	%
	67    : 160 110 170 162 000;
	
	% write Hex1 = 1 %
	72: 100 001 150 401 505;
	
	% loop():		  %
	77    : 150 121 170 127;
	81    : 150 015 170 127;

	% jump to end program % 
	% no need to execute this function zone %
	% go to line 0 %;
	85: 170 000;
	

	% loop(): go back to R5 %
	% call MVI, R7, #126    %
	% two big series loop 	%
	87: 110 001 120 600 422 047 130 600 433 067 331 676 321 674;
	101: 120 600 422 047 130 600 433 067 331 676 321 674 075;
	% R1,R2,R3,R4,R5,R6 %

	% clearAllHex(): to zero line 144(oct) %
	%  go to line inside R6 after done     %
	114: 100; % // R0 = 0 %
	115: 000;
	116: 110; % // R1=1  %
	117: 001; 
	118: 120; % // R2=5	% 
	119: 005;
	120: 047; % // begin loop R4		%
	121: 130; %// R3 = 400				%
	122: 400;
	123: 232; %// R3= R3+R2				%
	124: 503; %// Hex of R3 = 0			%
	125: 321; %// R2=R2-R1				%
	126: 674; %// go back to R4			%
	127: 076; %// go back to top		%
END;
