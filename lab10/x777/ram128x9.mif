-- Copyright (C) 2018  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details.

-- Quartus Prime generated Memory Initialization File (.mif)

WIDTH=9;
DEPTH=128;

ADDRESS_RADIX=UNS;
DATA_RADIX=OCT;
% X = R1, Y = R2%
% X-Y = 11-77 = %
CONTENT BEGIN
	0    :   100; %mvi R0, #127%
	1    :   177; %%
	2    :   410; %ld R1,R0%
	3    :   100; %mvi R0,126%
	4    :   176; %%
	5    :   420; %ld R2, R0%

% start compare X != Y %
	6	:	001;	%R0=X % 
	7 	: 	302;	%sub R0,R2 // X = X - Y%
	8	:	100;
	9	:	015;
	10	:	670;	%mvnz R7,R0 go begin loop when Y!=X	%
	% when number is zero	%
	11	:	170; 	% store R0 = show result%
	12	:	052;	% show result line = #42 %

%begin loop%
	13	:	001; %// R0=R1=X %
	14	:	150;	%mvi, R5, # %
	15	:	025;	%//line=21%
	16	:	302; %sub R0,RY (check R0-RY if R0> RY)%
	17	:	775; %mvgt R7,R5 go to R5 line if R0>R7 (X>Y)%
	18	:	321;	%sub R2,R1 Y=Y-X%
	19	:	170;	%mvi R7, # done line%
	20	:	026;	%//line=22%

	21	:	312; %sub R1,R2 X=X-Y%

%done line%
	22	: 	170; %back to compare again%
	23	:	006;

	42	:	100; % mvi R0%
	43	:	200; %led address%
	44	:	510; %st R1 which is x into LED address%
	
%%
	45	:	130; % mvi R3,#100% 
	46	:	144;
	47	:	041; %mv R1,R4%
	48	:	100; %mvi R0, #1 % 
	49	:	001;
	50	:	150; %mvi R5, #0%
	51	:	000;
%begin=64%
	52	:	024; %mv R2,R4%
	53	:	323; %sub R2,R3%
	54	:	120; %mvi R2, #loop%
	55	:	074;
	56	:	772; %mvgt R7, #loop when R4>R3%
	57	:	120;%mvi R2, #out_loop %
	58	:	100;
	59	:	672; %mvnz R7, #out_loop when R4-R3!=0 %
%loop=74%
	60	:	250; %add R5,R0%
	61	:	343; %sub R4,R3%
	62	:	170; %mvi R7, #begin %
	63	:	064;
%out_loop=100%
	64	:	100; %mvi R0, #405%
	65	:	405;
	66	:	550; %st R5,R0  (show R5 on R0)%

	124	:	170;
	125	:	174;
	126: 144; %Y%
	127: 144;  %X%
END;
