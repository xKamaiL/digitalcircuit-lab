-- Copyright (C) 2018  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details.

-- Quartus Prime generated Memory Initialization File (.mif)

WIDTH=9;
DEPTH=128;

ADDRESS_RADIX=UNS;
DATA_RADIX=OCT;

CONTENT BEGIN
	0    :   100;
	1    :   005;
	2    :   150;
	3    :   405;
	4    :   505;

	5    :   110; % start loop %
	6    :   001;
	7    :   120;
	8    :   777;
	9    :   047;
	10   :   130;
	11   :   777;
	12   :   067;
	13   :   331;
	14   :   676;
	15   :   321;
	16   :   674; % while(r4 != 0) %

	17   :   110; % start loop %
	18   :   001;
	19   :   120;
	20   :   777;
	21   :   047;
	22   :   130;
	23   :   777;
	24   :   067;
	25   :   331;
	26   :   676;
	27   :   321;
	28   :   674; % while(r4 != 0) %


	29   :   110; % start loop %
	30   :   001;
	31   :   120;
	32   :   777;
	33   :   047;
	34   :   130;
	35   :   777;
	36   :   067;
	37   :   331;
	38   :   676;
	39   :   321;
	40   :   674; % while(r4 != 0) %


	41   :   100;
	42   :   000;
	43   :   150;
	44   :   405;
	45   :   505; % Hex5 = 0 %

	46   :   100;
	47   :   004;
	48   :   150;
	49   :   404;
	50   :   505; % Hex4 = 4 %

	51   :   110; % start loop %
	52   :   001;
	53   :   120;
	54   :   777;
	55   :   047;
	56   :   130;
	57   :   777;
	58   :   067;
	59   :   331;
	60   :   676;
	61   :   321;
	62   :   674; % while(r4 != 0) %

	63   :   100;
	64   :   000;
	65   :   150;
	66   :   404; % 4 %
	67   :   505; % Hex4 = 0 %

	68   :   100;
	69   :   003;
	70   :   150;
	71   :   403; % 3 %
	72   :   505; % Hex3 = 3 %


	[73..127]  :   000;
END;
