// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/31/2022 01:30:54"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab5part3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab5part3_vlg_sample_tst(
	clock50,
	key0,
	key1,
	sw,
	sampler_tx
);
input  clock50;
input  key0;
input  key1;
input [7:0] sw;
output sampler_tx;

reg sample;
time current_time;
always @(clock50 or key0 or key1 or sw)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab5part3_vlg_check_tst (
	debug1,
	debug2,
	debug3,
	hex0,
	hex1,
	hex2,
	r1,
	r2,
	sampler_rx
);
input [6:0] debug1;
input [6:0] debug2;
input [6:0] debug3;
input [0:6] hex0;
input [0:6] hex1;
input [0:6] hex2;
input  r1;
input  r2;
input sampler_rx;

reg [6:0] debug1_expected;
reg [6:0] debug2_expected;
reg [6:0] debug3_expected;
reg [0:6] hex0_expected;
reg [0:6] hex1_expected;
reg [0:6] hex2_expected;
reg  r1_expected;
reg  r2_expected;

reg [6:0] debug1_prev;
reg [6:0] debug2_prev;
reg [6:0] debug3_prev;
reg [0:6] hex0_prev;
reg [0:6] hex1_prev;
reg [0:6] hex2_prev;
reg  r1_prev;
reg  r2_prev;

reg [6:0] debug1_expected_prev;
reg [6:0] debug2_expected_prev;
reg [6:0] debug3_expected_prev;
reg [0:6] hex0_expected_prev;
reg [0:6] hex1_expected_prev;
reg [0:6] hex2_expected_prev;
reg  r1_expected_prev;
reg  r2_expected_prev;

reg [6:0] last_debug1_exp;
reg [6:0] last_debug2_exp;
reg [6:0] last_debug3_exp;
reg [0:6] last_hex0_exp;
reg [0:6] last_hex1_exp;
reg [0:6] last_hex2_exp;
reg  last_r1_exp;
reg  last_r2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	debug1_prev = debug1;
	debug2_prev = debug2;
	debug3_prev = debug3;
	hex0_prev = hex0;
	hex1_prev = hex1;
	hex2_prev = hex2;
	r1_prev = r1;
	r2_prev = r2;
end

// update expected /o prevs

always @(trigger)
begin
	debug1_expected_prev = debug1_expected;
	debug2_expected_prev = debug2_expected;
	debug3_expected_prev = debug3_expected;
	hex0_expected_prev = hex0_expected;
	hex1_expected_prev = hex1_expected;
	hex2_expected_prev = hex2_expected;
	r1_expected_prev = r1_expected;
	r2_expected_prev = r2_expected;
end


// expected hex0[ 6 ]
initial
begin
	hex0_expected[6] = 1'bX;
	hex0_expected[6] = #999000 1'b0;
end 
// expected hex0[ 5 ]
initial
begin
	hex0_expected[5] = 1'bX;
	hex0_expected[5] = #999000 1'b0;
end 
// expected hex0[ 4 ]
initial
begin
	hex0_expected[4] = 1'bX;
	hex0_expected[4] = #999000 1'b0;
end 
// expected hex0[ 3 ]
initial
begin
	hex0_expected[3] = 1'bX;
	hex0_expected[3] = #999000 1'b0;
end 
// expected hex0[ 2 ]
initial
begin
	hex0_expected[2] = 1'bX;
	hex0_expected[2] = #999000 1'b0;
end 
// expected hex0[ 1 ]
initial
begin
	hex0_expected[1] = 1'bX;
	hex0_expected[1] = #999000 1'b0;
end 
// expected hex0[ 0 ]
initial
begin
	hex0_expected[0] = 1'bX;
	hex0_expected[0] = #999000 1'b0;
end 
// expected hex1[ 6 ]
initial
begin
	hex1_expected[6] = 1'bX;
	hex1_expected[6] = #999000 1'b0;
end 
// expected hex1[ 5 ]
initial
begin
	hex1_expected[5] = 1'bX;
	hex1_expected[5] = #999000 1'b0;
end 
// expected hex1[ 4 ]
initial
begin
	hex1_expected[4] = 1'bX;
	hex1_expected[4] = #999000 1'b0;
end 
// expected hex1[ 3 ]
initial
begin
	hex1_expected[3] = 1'bX;
	hex1_expected[3] = #999000 1'b0;
end 
// expected hex1[ 2 ]
initial
begin
	hex1_expected[2] = 1'bX;
	hex1_expected[2] = #999000 1'b0;
end 
// expected hex1[ 1 ]
initial
begin
	hex1_expected[1] = 1'bX;
	hex1_expected[1] = #999000 1'b0;
end 
// expected hex1[ 0 ]
initial
begin
	hex1_expected[0] = 1'bX;
	hex1_expected[0] = #999000 1'b0;
end 
// expected hex2[ 6 ]
initial
begin
	hex2_expected[6] = 1'bX;
	hex2_expected[6] = #999000 1'b0;
end 
// expected hex2[ 5 ]
initial
begin
	hex2_expected[5] = 1'bX;
	hex2_expected[5] = #999000 1'b0;
end 
// expected hex2[ 4 ]
initial
begin
	hex2_expected[4] = 1'bX;
	hex2_expected[4] = #999000 1'b0;
end 
// expected hex2[ 3 ]
initial
begin
	hex2_expected[3] = 1'bX;
	hex2_expected[3] = #999000 1'b0;
end 
// expected hex2[ 2 ]
initial
begin
	hex2_expected[2] = 1'bX;
	hex2_expected[2] = #999000 1'b0;
end 
// expected hex2[ 1 ]
initial
begin
	hex2_expected[1] = 1'bX;
	hex2_expected[1] = #999000 1'b0;
end 
// expected hex2[ 0 ]
initial
begin
	hex2_expected[0] = 1'bX;
	hex2_expected[0] = #999000 1'b0;
end 

// expected r1
initial
begin
	r1_expected = 1'bX;
	r1_expected = #999000 1'b0;
end 

// expected r2
initial
begin
	r2_expected = 1'bX;
	r2_expected = #999000 1'b0;
end 
// expected debug1[ 6 ]
initial
begin
	debug1_expected[6] = 1'bX;
	debug1_expected[6] = #999000 1'b0;
end 
// expected debug1[ 5 ]
initial
begin
	debug1_expected[5] = 1'bX;
	debug1_expected[5] = #999000 1'b0;
end 
// expected debug1[ 4 ]
initial
begin
	debug1_expected[4] = 1'bX;
	debug1_expected[4] = #999000 1'b0;
end 
// expected debug1[ 3 ]
initial
begin
	debug1_expected[3] = 1'bX;
	debug1_expected[3] = #999000 1'b0;
end 
// expected debug1[ 2 ]
initial
begin
	debug1_expected[2] = 1'bX;
	debug1_expected[2] = #999000 1'b0;
end 
// expected debug1[ 1 ]
initial
begin
	debug1_expected[1] = 1'bX;
	debug1_expected[1] = #999000 1'b0;
end 
// expected debug1[ 0 ]
initial
begin
	debug1_expected[0] = 1'bX;
	debug1_expected[0] = #999000 1'b0;
end 
// expected debug2[ 6 ]
initial
begin
	debug2_expected[6] = 1'bX;
	debug2_expected[6] = #999000 1'b0;
end 
// expected debug2[ 5 ]
initial
begin
	debug2_expected[5] = 1'bX;
	debug2_expected[5] = #999000 1'b0;
end 
// expected debug2[ 4 ]
initial
begin
	debug2_expected[4] = 1'bX;
	debug2_expected[4] = #999000 1'b0;
end 
// expected debug2[ 3 ]
initial
begin
	debug2_expected[3] = 1'bX;
	debug2_expected[3] = #999000 1'b0;
end 
// expected debug2[ 2 ]
initial
begin
	debug2_expected[2] = 1'bX;
	debug2_expected[2] = #999000 1'b0;
end 
// expected debug2[ 1 ]
initial
begin
	debug2_expected[1] = 1'bX;
	debug2_expected[1] = #999000 1'b0;
end 
// expected debug2[ 0 ]
initial
begin
	debug2_expected[0] = 1'bX;
	debug2_expected[0] = #999000 1'b0;
end 
// expected debug3[ 6 ]
initial
begin
	debug3_expected[6] = 1'bX;
	debug3_expected[6] = #999000 1'b0;
end 
// expected debug3[ 5 ]
initial
begin
	debug3_expected[5] = 1'bX;
	debug3_expected[5] = #999000 1'b0;
end 
// expected debug3[ 4 ]
initial
begin
	debug3_expected[4] = 1'bX;
	debug3_expected[4] = #999000 1'b0;
end 
// expected debug3[ 3 ]
initial
begin
	debug3_expected[3] = 1'bX;
	debug3_expected[3] = #999000 1'b0;
end 
// expected debug3[ 2 ]
initial
begin
	debug3_expected[2] = 1'bX;
	debug3_expected[2] = #999000 1'b0;
end 
// expected debug3[ 1 ]
initial
begin
	debug3_expected[1] = 1'bX;
	debug3_expected[1] = #999000 1'b0;
end 
// expected debug3[ 0 ]
initial
begin
	debug3_expected[0] = 1'bX;
	debug3_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(debug1_expected or debug1 or debug2_expected or debug2 or debug3_expected or debug3 or hex0_expected or hex0 or hex1_expected or hex1 or hex2_expected or hex2 or r1_expected or r1 or r2_expected or r2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected debug1 = %b | expected debug2 = %b | expected debug3 = %b | expected hex0 = %b | expected hex1 = %b | expected hex2 = %b | expected r1 = %b | expected r2 = %b | ",debug1_expected_prev,debug2_expected_prev,debug3_expected_prev,hex0_expected_prev,hex1_expected_prev,hex2_expected_prev,r1_expected_prev,r2_expected_prev);
	$display("| real debug1 = %b | real debug2 = %b | real debug3 = %b | real hex0 = %b | real hex1 = %b | real hex2 = %b | real r1 = %b | real r2 = %b | ",debug1_prev,debug2_prev,debug3_prev,hex0_prev,hex1_prev,hex2_prev,r1_prev,r2_prev);
`endif
	if (
		( debug1_expected_prev[0] !== 1'bx ) && ( debug1_prev[0] !== debug1_expected_prev[0] )
		&& ((debug1_expected_prev[0] !== last_debug1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug1_expected_prev);
		$display ("     Real value = %b", debug1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug1_exp[0] = debug1_expected_prev[0];
	end
	if (
		( debug1_expected_prev[1] !== 1'bx ) && ( debug1_prev[1] !== debug1_expected_prev[1] )
		&& ((debug1_expected_prev[1] !== last_debug1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug1_expected_prev);
		$display ("     Real value = %b", debug1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug1_exp[1] = debug1_expected_prev[1];
	end
	if (
		( debug1_expected_prev[2] !== 1'bx ) && ( debug1_prev[2] !== debug1_expected_prev[2] )
		&& ((debug1_expected_prev[2] !== last_debug1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug1_expected_prev);
		$display ("     Real value = %b", debug1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug1_exp[2] = debug1_expected_prev[2];
	end
	if (
		( debug1_expected_prev[3] !== 1'bx ) && ( debug1_prev[3] !== debug1_expected_prev[3] )
		&& ((debug1_expected_prev[3] !== last_debug1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug1_expected_prev);
		$display ("     Real value = %b", debug1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug1_exp[3] = debug1_expected_prev[3];
	end
	if (
		( debug1_expected_prev[4] !== 1'bx ) && ( debug1_prev[4] !== debug1_expected_prev[4] )
		&& ((debug1_expected_prev[4] !== last_debug1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug1_expected_prev);
		$display ("     Real value = %b", debug1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug1_exp[4] = debug1_expected_prev[4];
	end
	if (
		( debug1_expected_prev[5] !== 1'bx ) && ( debug1_prev[5] !== debug1_expected_prev[5] )
		&& ((debug1_expected_prev[5] !== last_debug1_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug1_expected_prev);
		$display ("     Real value = %b", debug1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug1_exp[5] = debug1_expected_prev[5];
	end
	if (
		( debug1_expected_prev[6] !== 1'bx ) && ( debug1_prev[6] !== debug1_expected_prev[6] )
		&& ((debug1_expected_prev[6] !== last_debug1_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug1_expected_prev);
		$display ("     Real value = %b", debug1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug1_exp[6] = debug1_expected_prev[6];
	end
	if (
		( debug2_expected_prev[0] !== 1'bx ) && ( debug2_prev[0] !== debug2_expected_prev[0] )
		&& ((debug2_expected_prev[0] !== last_debug2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[0] = debug2_expected_prev[0];
	end
	if (
		( debug2_expected_prev[1] !== 1'bx ) && ( debug2_prev[1] !== debug2_expected_prev[1] )
		&& ((debug2_expected_prev[1] !== last_debug2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[1] = debug2_expected_prev[1];
	end
	if (
		( debug2_expected_prev[2] !== 1'bx ) && ( debug2_prev[2] !== debug2_expected_prev[2] )
		&& ((debug2_expected_prev[2] !== last_debug2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[2] = debug2_expected_prev[2];
	end
	if (
		( debug2_expected_prev[3] !== 1'bx ) && ( debug2_prev[3] !== debug2_expected_prev[3] )
		&& ((debug2_expected_prev[3] !== last_debug2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[3] = debug2_expected_prev[3];
	end
	if (
		( debug2_expected_prev[4] !== 1'bx ) && ( debug2_prev[4] !== debug2_expected_prev[4] )
		&& ((debug2_expected_prev[4] !== last_debug2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[4] = debug2_expected_prev[4];
	end
	if (
		( debug2_expected_prev[5] !== 1'bx ) && ( debug2_prev[5] !== debug2_expected_prev[5] )
		&& ((debug2_expected_prev[5] !== last_debug2_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[5] = debug2_expected_prev[5];
	end
	if (
		( debug2_expected_prev[6] !== 1'bx ) && ( debug2_prev[6] !== debug2_expected_prev[6] )
		&& ((debug2_expected_prev[6] !== last_debug2_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug2_expected_prev);
		$display ("     Real value = %b", debug2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug2_exp[6] = debug2_expected_prev[6];
	end
	if (
		( debug3_expected_prev[0] !== 1'bx ) && ( debug3_prev[0] !== debug3_expected_prev[0] )
		&& ((debug3_expected_prev[0] !== last_debug3_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug3_expected_prev);
		$display ("     Real value = %b", debug3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_debug3_exp[0] = debug3_expected_prev[0];
	end
	if (
		( debug3_expected_prev[1] !== 1'bx ) && ( debug3_prev[1] !== debug3_expected_prev[1] )
		&& ((debug3_expected_prev[1] !== last_debug3_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug3_expected_prev);
		$display ("     Real value = %b", debug3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_debug3_exp[1] = debug3_expected_prev[1];
	end
	if (
		( debug3_expected_prev[2] !== 1'bx ) && ( debug3_prev[2] !== debug3_expected_prev[2] )
		&& ((debug3_expected_prev[2] !== last_debug3_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug3_expected_prev);
		$display ("     Real value = %b", debug3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_debug3_exp[2] = debug3_expected_prev[2];
	end
	if (
		( debug3_expected_prev[3] !== 1'bx ) && ( debug3_prev[3] !== debug3_expected_prev[3] )
		&& ((debug3_expected_prev[3] !== last_debug3_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug3_expected_prev);
		$display ("     Real value = %b", debug3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_debug3_exp[3] = debug3_expected_prev[3];
	end
	if (
		( debug3_expected_prev[4] !== 1'bx ) && ( debug3_prev[4] !== debug3_expected_prev[4] )
		&& ((debug3_expected_prev[4] !== last_debug3_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug3_expected_prev);
		$display ("     Real value = %b", debug3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_debug3_exp[4] = debug3_expected_prev[4];
	end
	if (
		( debug3_expected_prev[5] !== 1'bx ) && ( debug3_prev[5] !== debug3_expected_prev[5] )
		&& ((debug3_expected_prev[5] !== last_debug3_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug3_expected_prev);
		$display ("     Real value = %b", debug3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_debug3_exp[5] = debug3_expected_prev[5];
	end
	if (
		( debug3_expected_prev[6] !== 1'bx ) && ( debug3_prev[6] !== debug3_expected_prev[6] )
		&& ((debug3_expected_prev[6] !== last_debug3_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug3_expected_prev);
		$display ("     Real value = %b", debug3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_debug3_exp[6] = debug3_expected_prev[6];
	end
	if (
		( hex0_expected_prev[0] !== 1'bx ) && ( hex0_prev[0] !== hex0_expected_prev[0] )
		&& ((hex0_expected_prev[0] !== last_hex0_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex0_exp[0] = hex0_expected_prev[0];
	end
	if (
		( hex0_expected_prev[1] !== 1'bx ) && ( hex0_prev[1] !== hex0_expected_prev[1] )
		&& ((hex0_expected_prev[1] !== last_hex0_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex0_exp[1] = hex0_expected_prev[1];
	end
	if (
		( hex0_expected_prev[2] !== 1'bx ) && ( hex0_prev[2] !== hex0_expected_prev[2] )
		&& ((hex0_expected_prev[2] !== last_hex0_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex0_exp[2] = hex0_expected_prev[2];
	end
	if (
		( hex0_expected_prev[3] !== 1'bx ) && ( hex0_prev[3] !== hex0_expected_prev[3] )
		&& ((hex0_expected_prev[3] !== last_hex0_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex0_exp[3] = hex0_expected_prev[3];
	end
	if (
		( hex0_expected_prev[4] !== 1'bx ) && ( hex0_prev[4] !== hex0_expected_prev[4] )
		&& ((hex0_expected_prev[4] !== last_hex0_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex0_exp[4] = hex0_expected_prev[4];
	end
	if (
		( hex0_expected_prev[5] !== 1'bx ) && ( hex0_prev[5] !== hex0_expected_prev[5] )
		&& ((hex0_expected_prev[5] !== last_hex0_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex0_exp[5] = hex0_expected_prev[5];
	end
	if (
		( hex0_expected_prev[6] !== 1'bx ) && ( hex0_prev[6] !== hex0_expected_prev[6] )
		&& ((hex0_expected_prev[6] !== last_hex0_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex0_exp[6] = hex0_expected_prev[6];
	end
	if (
		( hex1_expected_prev[0] !== 1'bx ) && ( hex1_prev[0] !== hex1_expected_prev[0] )
		&& ((hex1_expected_prev[0] !== last_hex1_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex1_exp[0] = hex1_expected_prev[0];
	end
	if (
		( hex1_expected_prev[1] !== 1'bx ) && ( hex1_prev[1] !== hex1_expected_prev[1] )
		&& ((hex1_expected_prev[1] !== last_hex1_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex1_exp[1] = hex1_expected_prev[1];
	end
	if (
		( hex1_expected_prev[2] !== 1'bx ) && ( hex1_prev[2] !== hex1_expected_prev[2] )
		&& ((hex1_expected_prev[2] !== last_hex1_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex1_exp[2] = hex1_expected_prev[2];
	end
	if (
		( hex1_expected_prev[3] !== 1'bx ) && ( hex1_prev[3] !== hex1_expected_prev[3] )
		&& ((hex1_expected_prev[3] !== last_hex1_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex1_exp[3] = hex1_expected_prev[3];
	end
	if (
		( hex1_expected_prev[4] !== 1'bx ) && ( hex1_prev[4] !== hex1_expected_prev[4] )
		&& ((hex1_expected_prev[4] !== last_hex1_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex1_exp[4] = hex1_expected_prev[4];
	end
	if (
		( hex1_expected_prev[5] !== 1'bx ) && ( hex1_prev[5] !== hex1_expected_prev[5] )
		&& ((hex1_expected_prev[5] !== last_hex1_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex1_exp[5] = hex1_expected_prev[5];
	end
	if (
		( hex1_expected_prev[6] !== 1'bx ) && ( hex1_prev[6] !== hex1_expected_prev[6] )
		&& ((hex1_expected_prev[6] !== last_hex1_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex1_exp[6] = hex1_expected_prev[6];
	end
	if (
		( hex2_expected_prev[0] !== 1'bx ) && ( hex2_prev[0] !== hex2_expected_prev[0] )
		&& ((hex2_expected_prev[0] !== last_hex2_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hex2_exp[0] = hex2_expected_prev[0];
	end
	if (
		( hex2_expected_prev[1] !== 1'bx ) && ( hex2_prev[1] !== hex2_expected_prev[1] )
		&& ((hex2_expected_prev[1] !== last_hex2_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hex2_exp[1] = hex2_expected_prev[1];
	end
	if (
		( hex2_expected_prev[2] !== 1'bx ) && ( hex2_prev[2] !== hex2_expected_prev[2] )
		&& ((hex2_expected_prev[2] !== last_hex2_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hex2_exp[2] = hex2_expected_prev[2];
	end
	if (
		( hex2_expected_prev[3] !== 1'bx ) && ( hex2_prev[3] !== hex2_expected_prev[3] )
		&& ((hex2_expected_prev[3] !== last_hex2_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hex2_exp[3] = hex2_expected_prev[3];
	end
	if (
		( hex2_expected_prev[4] !== 1'bx ) && ( hex2_prev[4] !== hex2_expected_prev[4] )
		&& ((hex2_expected_prev[4] !== last_hex2_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hex2_exp[4] = hex2_expected_prev[4];
	end
	if (
		( hex2_expected_prev[5] !== 1'bx ) && ( hex2_prev[5] !== hex2_expected_prev[5] )
		&& ((hex2_expected_prev[5] !== last_hex2_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hex2_exp[5] = hex2_expected_prev[5];
	end
	if (
		( hex2_expected_prev[6] !== 1'bx ) && ( hex2_prev[6] !== hex2_expected_prev[6] )
		&& ((hex2_expected_prev[6] !== last_hex2_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_hex2_exp[6] = hex2_expected_prev[6];
	end
	if (
		( r1_expected_prev !== 1'bx ) && ( r1_prev !== r1_expected_prev )
		&& ((r1_expected_prev !== last_r1_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r1_expected_prev);
		$display ("     Real value = %b", r1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_r1_exp = r1_expected_prev;
	end
	if (
		( r2_expected_prev !== 1'bx ) && ( r2_prev !== r2_expected_prev )
		&& ((r2_expected_prev !== last_r2_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r2_expected_prev);
		$display ("     Real value = %b", r2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_r2_exp = r2_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#5000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab5part3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock50;
reg key0;
reg key1;
reg [7:0] sw;
// wires                                               
wire [6:0] debug1;
wire [6:0] debug2;
wire [6:0] debug3;
wire [0:6] hex0;
wire [0:6] hex1;
wire [0:6] hex2;
wire r1;
wire r2;

wire sampler;                             

// assign statements (if any)                          
lab5part3 i1 (
// port map - connection between master ports and signals/registers   
	.clock50(clock50),
	.debug1(debug1),
	.debug2(debug2),
	.debug3(debug3),
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.key0(key0),
	.key1(key1),
	.r1(r1),
	.r2(r2),
	.sw(sw)
);

// clock50
always
begin
	clock50 = 1'b0;
	clock50 = #5000 1'b1;
	#5000;
end 

// key0
initial
begin
	key0 = 1'b1;
end 

// key1
initial
begin
	key1 = 1'b0;
	key1 = #1000000 1'b1;
end 
// sw[ 7 ]
initial
begin
	sw[7] = 1'b0;
end 
// sw[ 6 ]
initial
begin
	sw[6] = 1'b0;
end 
// sw[ 5 ]
initial
begin
	sw[5] = 1'b0;
	sw[5] = #620000 1'b1;
	sw[5] = #380000 1'b0;
end 
// sw[ 4 ]
initial
begin
	sw[4] = 1'b0;
	sw[4] = #620000 1'b1;
	sw[4] = #380000 1'b0;
end 
// sw[ 3 ]
initial
begin
	sw[3] = 1'b0;
end 
// sw[ 2 ]
initial
begin
	sw[2] = 1'b1;
	sw[2] = #620000 1'b0;
end 
// sw[ 1 ]
initial
begin
	sw[1] = 1'b0;
	sw[1] = #620000 1'b1;
end 
// sw[ 0 ]
initial
begin
	sw[0] = 1'b1;
	sw[0] = #620000 1'b0;
end 

lab5part3_vlg_sample_tst tb_sample (
	.clock50(clock50),
	.key0(key0),
	.key1(key1),
	.sw(sw),
	.sampler_tx(sampler)
);

lab5part3_vlg_check_tst tb_out(
	.debug1(debug1),
	.debug2(debug2),
	.debug3(debug3),
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.r1(r1),
	.r2(r2),
	.sampler_rx(sampler)
);
endmodule

