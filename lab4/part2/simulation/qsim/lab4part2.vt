// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/29/2022 21:50:01"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab4part2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab4part2_vlg_sample_tst(
	clear,
	enable,
	init,
	key0,
	sampler_tx
);
input  clear;
input  enable;
input  init;
input  key0;
output sampler_tx;

reg sample;
time current_time;
always @(clear or enable or init or key0)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab4part2_vlg_check_tst (
	debug,
	hex0,
	hex1,
	hex2,
	hex3,
	sampler_rx
);
input [15:0] debug;
input [0:6] hex0;
input [0:6] hex1;
input [0:6] hex2;
input [0:6] hex3;
input sampler_rx;

reg [15:0] debug_expected;
reg [0:6] hex0_expected;
reg [0:6] hex1_expected;
reg [0:6] hex2_expected;
reg [0:6] hex3_expected;

reg [15:0] debug_prev;
reg [0:6] hex0_prev;
reg [0:6] hex1_prev;
reg [0:6] hex2_prev;
reg [0:6] hex3_prev;

reg [15:0] debug_expected_prev;
reg [0:6] hex0_expected_prev;
reg [0:6] hex1_expected_prev;
reg [0:6] hex2_expected_prev;
reg [0:6] hex3_expected_prev;

reg [15:0] last_debug_exp;
reg [0:6] last_hex0_exp;
reg [0:6] last_hex1_exp;
reg [0:6] last_hex2_exp;
reg [0:6] last_hex3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	debug_prev = debug;
	hex0_prev = hex0;
	hex1_prev = hex1;
	hex2_prev = hex2;
	hex3_prev = hex3;
end

// update expected /o prevs

always @(trigger)
begin
	debug_expected_prev = debug_expected;
	hex0_expected_prev = hex0_expected;
	hex1_expected_prev = hex1_expected;
	hex2_expected_prev = hex2_expected;
	hex3_expected_prev = hex3_expected;
end


// expected debug[ 15 ]
initial
begin
	debug_expected[15] = 1'bX;
end 
// expected debug[ 14 ]
initial
begin
	debug_expected[14] = 1'bX;
end 
// expected debug[ 13 ]
initial
begin
	debug_expected[13] = 1'bX;
end 
// expected debug[ 12 ]
initial
begin
	debug_expected[12] = 1'bX;
end 
// expected debug[ 11 ]
initial
begin
	debug_expected[11] = 1'bX;
end 
// expected debug[ 10 ]
initial
begin
	debug_expected[10] = 1'bX;
end 
// expected debug[ 9 ]
initial
begin
	debug_expected[9] = 1'bX;
end 
// expected debug[ 8 ]
initial
begin
	debug_expected[8] = 1'bX;
end 
// expected debug[ 7 ]
initial
begin
	debug_expected[7] = 1'bX;
end 
// expected debug[ 6 ]
initial
begin
	debug_expected[6] = 1'bX;
end 
// expected debug[ 5 ]
initial
begin
	debug_expected[5] = 1'bX;
end 
// expected debug[ 4 ]
initial
begin
	debug_expected[4] = 1'bX;
end 
// expected debug[ 3 ]
initial
begin
	debug_expected[3] = 1'bX;
end 
// expected debug[ 2 ]
initial
begin
	debug_expected[2] = 1'bX;
end 
// expected debug[ 1 ]
initial
begin
	debug_expected[1] = 1'bX;
end 
// expected debug[ 0 ]
initial
begin
	debug_expected[0] = 1'bX;
end 
// expected hex0[ 6 ]
initial
begin
	hex0_expected[6] = 1'bX;
end 
// expected hex0[ 5 ]
initial
begin
	hex0_expected[5] = 1'bX;
end 
// expected hex0[ 4 ]
initial
begin
	hex0_expected[4] = 1'bX;
end 
// expected hex0[ 3 ]
initial
begin
	hex0_expected[3] = 1'bX;
end 
// expected hex0[ 2 ]
initial
begin
	hex0_expected[2] = 1'bX;
end 
// expected hex0[ 1 ]
initial
begin
	hex0_expected[1] = 1'bX;
end 
// expected hex0[ 0 ]
initial
begin
	hex0_expected[0] = 1'bX;
end 
// expected hex1[ 6 ]
initial
begin
	hex1_expected[6] = 1'bX;
end 
// expected hex1[ 5 ]
initial
begin
	hex1_expected[5] = 1'bX;
end 
// expected hex1[ 4 ]
initial
begin
	hex1_expected[4] = 1'bX;
end 
// expected hex1[ 3 ]
initial
begin
	hex1_expected[3] = 1'bX;
end 
// expected hex1[ 2 ]
initial
begin
	hex1_expected[2] = 1'bX;
end 
// expected hex1[ 1 ]
initial
begin
	hex1_expected[1] = 1'bX;
end 
// expected hex1[ 0 ]
initial
begin
	hex1_expected[0] = 1'bX;
end 
// expected hex2[ 6 ]
initial
begin
	hex2_expected[6] = 1'bX;
end 
// expected hex2[ 5 ]
initial
begin
	hex2_expected[5] = 1'bX;
end 
// expected hex2[ 4 ]
initial
begin
	hex2_expected[4] = 1'bX;
end 
// expected hex2[ 3 ]
initial
begin
	hex2_expected[3] = 1'bX;
end 
// expected hex2[ 2 ]
initial
begin
	hex2_expected[2] = 1'bX;
end 
// expected hex2[ 1 ]
initial
begin
	hex2_expected[1] = 1'bX;
end 
// expected hex2[ 0 ]
initial
begin
	hex2_expected[0] = 1'bX;
end 
// expected hex3[ 6 ]
initial
begin
	hex3_expected[6] = 1'bX;
end 
// expected hex3[ 5 ]
initial
begin
	hex3_expected[5] = 1'bX;
end 
// expected hex3[ 4 ]
initial
begin
	hex3_expected[4] = 1'bX;
end 
// expected hex3[ 3 ]
initial
begin
	hex3_expected[3] = 1'bX;
end 
// expected hex3[ 2 ]
initial
begin
	hex3_expected[2] = 1'bX;
end 
// expected hex3[ 1 ]
initial
begin
	hex3_expected[1] = 1'bX;
end 
// expected hex3[ 0 ]
initial
begin
	hex3_expected[0] = 1'bX;
end 
// generate trigger
always @(debug_expected or debug or hex0_expected or hex0 or hex1_expected or hex1 or hex2_expected or hex2 or hex3_expected or hex3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected debug = %b | expected hex0 = %b | expected hex1 = %b | expected hex2 = %b | expected hex3 = %b | ",debug_expected_prev,hex0_expected_prev,hex1_expected_prev,hex2_expected_prev,hex3_expected_prev);
	$display("| real debug = %b | real hex0 = %b | real hex1 = %b | real hex2 = %b | real hex3 = %b | ",debug_prev,hex0_prev,hex1_prev,hex2_prev,hex3_prev);
`endif
	if (
		( debug_expected_prev[0] !== 1'bx ) && ( debug_prev[0] !== debug_expected_prev[0] )
		&& ((debug_expected_prev[0] !== last_debug_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug_exp[0] = debug_expected_prev[0];
	end
	if (
		( debug_expected_prev[1] !== 1'bx ) && ( debug_prev[1] !== debug_expected_prev[1] )
		&& ((debug_expected_prev[1] !== last_debug_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug_exp[1] = debug_expected_prev[1];
	end
	if (
		( debug_expected_prev[2] !== 1'bx ) && ( debug_prev[2] !== debug_expected_prev[2] )
		&& ((debug_expected_prev[2] !== last_debug_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug_exp[2] = debug_expected_prev[2];
	end
	if (
		( debug_expected_prev[3] !== 1'bx ) && ( debug_prev[3] !== debug_expected_prev[3] )
		&& ((debug_expected_prev[3] !== last_debug_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug_exp[3] = debug_expected_prev[3];
	end
	if (
		( debug_expected_prev[4] !== 1'bx ) && ( debug_prev[4] !== debug_expected_prev[4] )
		&& ((debug_expected_prev[4] !== last_debug_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug_exp[4] = debug_expected_prev[4];
	end
	if (
		( debug_expected_prev[5] !== 1'bx ) && ( debug_prev[5] !== debug_expected_prev[5] )
		&& ((debug_expected_prev[5] !== last_debug_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug_exp[5] = debug_expected_prev[5];
	end
	if (
		( debug_expected_prev[6] !== 1'bx ) && ( debug_prev[6] !== debug_expected_prev[6] )
		&& ((debug_expected_prev[6] !== last_debug_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug_exp[6] = debug_expected_prev[6];
	end
	if (
		( debug_expected_prev[7] !== 1'bx ) && ( debug_prev[7] !== debug_expected_prev[7] )
		&& ((debug_expected_prev[7] !== last_debug_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug_exp[7] = debug_expected_prev[7];
	end
	if (
		( debug_expected_prev[8] !== 1'bx ) && ( debug_prev[8] !== debug_expected_prev[8] )
		&& ((debug_expected_prev[8] !== last_debug_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug_exp[8] = debug_expected_prev[8];
	end
	if (
		( debug_expected_prev[9] !== 1'bx ) && ( debug_prev[9] !== debug_expected_prev[9] )
		&& ((debug_expected_prev[9] !== last_debug_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug_exp[9] = debug_expected_prev[9];
	end
	if (
		( debug_expected_prev[10] !== 1'bx ) && ( debug_prev[10] !== debug_expected_prev[10] )
		&& ((debug_expected_prev[10] !== last_debug_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug_exp[10] = debug_expected_prev[10];
	end
	if (
		( debug_expected_prev[11] !== 1'bx ) && ( debug_prev[11] !== debug_expected_prev[11] )
		&& ((debug_expected_prev[11] !== last_debug_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug_exp[11] = debug_expected_prev[11];
	end
	if (
		( debug_expected_prev[12] !== 1'bx ) && ( debug_prev[12] !== debug_expected_prev[12] )
		&& ((debug_expected_prev[12] !== last_debug_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug_exp[12] = debug_expected_prev[12];
	end
	if (
		( debug_expected_prev[13] !== 1'bx ) && ( debug_prev[13] !== debug_expected_prev[13] )
		&& ((debug_expected_prev[13] !== last_debug_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug_exp[13] = debug_expected_prev[13];
	end
	if (
		( debug_expected_prev[14] !== 1'bx ) && ( debug_prev[14] !== debug_expected_prev[14] )
		&& ((debug_expected_prev[14] !== last_debug_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug_exp[14] = debug_expected_prev[14];
	end
	if (
		( debug_expected_prev[15] !== 1'bx ) && ( debug_prev[15] !== debug_expected_prev[15] )
		&& ((debug_expected_prev[15] !== last_debug_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug_exp[15] = debug_expected_prev[15];
	end
	if (
		( hex0_expected_prev[0] !== 1'bx ) && ( hex0_prev[0] !== hex0_expected_prev[0] )
		&& ((hex0_expected_prev[0] !== last_hex0_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex0_exp[0] = hex0_expected_prev[0];
	end
	if (
		( hex0_expected_prev[1] !== 1'bx ) && ( hex0_prev[1] !== hex0_expected_prev[1] )
		&& ((hex0_expected_prev[1] !== last_hex0_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex0_exp[1] = hex0_expected_prev[1];
	end
	if (
		( hex0_expected_prev[2] !== 1'bx ) && ( hex0_prev[2] !== hex0_expected_prev[2] )
		&& ((hex0_expected_prev[2] !== last_hex0_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex0_exp[2] = hex0_expected_prev[2];
	end
	if (
		( hex0_expected_prev[3] !== 1'bx ) && ( hex0_prev[3] !== hex0_expected_prev[3] )
		&& ((hex0_expected_prev[3] !== last_hex0_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex0_exp[3] = hex0_expected_prev[3];
	end
	if (
		( hex0_expected_prev[4] !== 1'bx ) && ( hex0_prev[4] !== hex0_expected_prev[4] )
		&& ((hex0_expected_prev[4] !== last_hex0_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex0_exp[4] = hex0_expected_prev[4];
	end
	if (
		( hex0_expected_prev[5] !== 1'bx ) && ( hex0_prev[5] !== hex0_expected_prev[5] )
		&& ((hex0_expected_prev[5] !== last_hex0_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex0_exp[5] = hex0_expected_prev[5];
	end
	if (
		( hex0_expected_prev[6] !== 1'bx ) && ( hex0_prev[6] !== hex0_expected_prev[6] )
		&& ((hex0_expected_prev[6] !== last_hex0_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex0_expected_prev);
		$display ("     Real value = %b", hex0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_hex0_exp[6] = hex0_expected_prev[6];
	end
	if (
		( hex1_expected_prev[0] !== 1'bx ) && ( hex1_prev[0] !== hex1_expected_prev[0] )
		&& ((hex1_expected_prev[0] !== last_hex1_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hex1_exp[0] = hex1_expected_prev[0];
	end
	if (
		( hex1_expected_prev[1] !== 1'bx ) && ( hex1_prev[1] !== hex1_expected_prev[1] )
		&& ((hex1_expected_prev[1] !== last_hex1_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hex1_exp[1] = hex1_expected_prev[1];
	end
	if (
		( hex1_expected_prev[2] !== 1'bx ) && ( hex1_prev[2] !== hex1_expected_prev[2] )
		&& ((hex1_expected_prev[2] !== last_hex1_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hex1_exp[2] = hex1_expected_prev[2];
	end
	if (
		( hex1_expected_prev[3] !== 1'bx ) && ( hex1_prev[3] !== hex1_expected_prev[3] )
		&& ((hex1_expected_prev[3] !== last_hex1_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hex1_exp[3] = hex1_expected_prev[3];
	end
	if (
		( hex1_expected_prev[4] !== 1'bx ) && ( hex1_prev[4] !== hex1_expected_prev[4] )
		&& ((hex1_expected_prev[4] !== last_hex1_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hex1_exp[4] = hex1_expected_prev[4];
	end
	if (
		( hex1_expected_prev[5] !== 1'bx ) && ( hex1_prev[5] !== hex1_expected_prev[5] )
		&& ((hex1_expected_prev[5] !== last_hex1_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hex1_exp[5] = hex1_expected_prev[5];
	end
	if (
		( hex1_expected_prev[6] !== 1'bx ) && ( hex1_prev[6] !== hex1_expected_prev[6] )
		&& ((hex1_expected_prev[6] !== last_hex1_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex1_expected_prev);
		$display ("     Real value = %b", hex1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_hex1_exp[6] = hex1_expected_prev[6];
	end
	if (
		( hex2_expected_prev[0] !== 1'bx ) && ( hex2_prev[0] !== hex2_expected_prev[0] )
		&& ((hex2_expected_prev[0] !== last_hex2_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex2_exp[0] = hex2_expected_prev[0];
	end
	if (
		( hex2_expected_prev[1] !== 1'bx ) && ( hex2_prev[1] !== hex2_expected_prev[1] )
		&& ((hex2_expected_prev[1] !== last_hex2_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex2_exp[1] = hex2_expected_prev[1];
	end
	if (
		( hex2_expected_prev[2] !== 1'bx ) && ( hex2_prev[2] !== hex2_expected_prev[2] )
		&& ((hex2_expected_prev[2] !== last_hex2_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex2_exp[2] = hex2_expected_prev[2];
	end
	if (
		( hex2_expected_prev[3] !== 1'bx ) && ( hex2_prev[3] !== hex2_expected_prev[3] )
		&& ((hex2_expected_prev[3] !== last_hex2_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex2_exp[3] = hex2_expected_prev[3];
	end
	if (
		( hex2_expected_prev[4] !== 1'bx ) && ( hex2_prev[4] !== hex2_expected_prev[4] )
		&& ((hex2_expected_prev[4] !== last_hex2_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex2_exp[4] = hex2_expected_prev[4];
	end
	if (
		( hex2_expected_prev[5] !== 1'bx ) && ( hex2_prev[5] !== hex2_expected_prev[5] )
		&& ((hex2_expected_prev[5] !== last_hex2_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex2_exp[5] = hex2_expected_prev[5];
	end
	if (
		( hex2_expected_prev[6] !== 1'bx ) && ( hex2_prev[6] !== hex2_expected_prev[6] )
		&& ((hex2_expected_prev[6] !== last_hex2_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex2_expected_prev);
		$display ("     Real value = %b", hex2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_hex2_exp[6] = hex2_expected_prev[6];
	end
	if (
		( hex3_expected_prev[0] !== 1'bx ) && ( hex3_prev[0] !== hex3_expected_prev[0] )
		&& ((hex3_expected_prev[0] !== last_hex3_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_expected_prev);
		$display ("     Real value = %b", hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex3_exp[0] = hex3_expected_prev[0];
	end
	if (
		( hex3_expected_prev[1] !== 1'bx ) && ( hex3_prev[1] !== hex3_expected_prev[1] )
		&& ((hex3_expected_prev[1] !== last_hex3_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_expected_prev);
		$display ("     Real value = %b", hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex3_exp[1] = hex3_expected_prev[1];
	end
	if (
		( hex3_expected_prev[2] !== 1'bx ) && ( hex3_prev[2] !== hex3_expected_prev[2] )
		&& ((hex3_expected_prev[2] !== last_hex3_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_expected_prev);
		$display ("     Real value = %b", hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex3_exp[2] = hex3_expected_prev[2];
	end
	if (
		( hex3_expected_prev[3] !== 1'bx ) && ( hex3_prev[3] !== hex3_expected_prev[3] )
		&& ((hex3_expected_prev[3] !== last_hex3_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_expected_prev);
		$display ("     Real value = %b", hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex3_exp[3] = hex3_expected_prev[3];
	end
	if (
		( hex3_expected_prev[4] !== 1'bx ) && ( hex3_prev[4] !== hex3_expected_prev[4] )
		&& ((hex3_expected_prev[4] !== last_hex3_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_expected_prev);
		$display ("     Real value = %b", hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex3_exp[4] = hex3_expected_prev[4];
	end
	if (
		( hex3_expected_prev[5] !== 1'bx ) && ( hex3_prev[5] !== hex3_expected_prev[5] )
		&& ((hex3_expected_prev[5] !== last_hex3_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_expected_prev);
		$display ("     Real value = %b", hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex3_exp[5] = hex3_expected_prev[5];
	end
	if (
		( hex3_expected_prev[6] !== 1'bx ) && ( hex3_prev[6] !== hex3_expected_prev[6] )
		&& ((hex3_expected_prev[6] !== last_hex3_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port hex3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", hex3_expected_prev);
		$display ("     Real value = %b", hex3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_hex3_exp[6] = hex3_expected_prev[6];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#500000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab4part2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clear;
reg enable;
reg init;
reg key0;
// wires                                               
wire [15:0] debug;
wire [0:6] hex0;
wire [0:6] hex1;
wire [0:6] hex2;
wire [0:6] hex3;

wire sampler;                             

// assign statements (if any)                          
lab4part2 i1 (
// port map - connection between master ports and signals/registers   
	.clear(clear),
	.debug(debug),
	.enable(enable),
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.hex3(hex3),
	.init(init),
	.key0(key0)
);

// clear
initial
begin
	clear = 1'b1;
	clear = #20000 1'b0;
	clear = #10000 1'b1;
	clear = #70000 1'b0;
	clear = #20000 1'b1;
end 

// enable
initial
begin
	enable = 1'b0;
	enable = #10000 1'b1;
end 

// key0
initial
begin
	key0 = 1'b1;
	# 10000;
	repeat(24)
	begin
		key0 = 1'b0;
		key0 = #10000 1'b1;
		# 10000;
	end
	key0 = 1'b0;
end 

// init
initial
begin
	init = 1'b1;
	init = #280000 1'b0;
	init = #20000 1'b1;
end 

lab4part2_vlg_sample_tst tb_sample (
	.clear(clear),
	.enable(enable),
	.init(init),
	.key0(key0),
	.sampler_tx(sampler)
);

lab4part2_vlg_check_tst tb_out(
	.debug(debug),
	.hex0(hex0),
	.hex1(hex1),
	.hex2(hex2),
	.hex3(hex3),
	.sampler_rx(sampler)
);
endmodule

