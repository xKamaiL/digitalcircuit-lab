// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/29/2022 23:11:33"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab7part4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab7part4_vlg_sample_tst(
	clk50,
	key0,
	key1,
	sw,
	sampler_tx
);
input  clk50;
input  key0;
input  key1;
input [2:0] sw;
output sampler_tx;

reg sample;
time current_time;
always @(clk50 or key0 or key1 or sw)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab7part4_vlg_check_tst (
	dd,
	debug_counter,
	debug_done,
	debug_i,
	debug_load,
	led,
	ledr,
	srgt,
	sampler_rx
);
input [3:0] dd;
input [2:0] debug_counter;
input  debug_done;
input [2:0] debug_i;
input  debug_load;
input [2:0] led;
input  ledr;
input  srgt;
input sampler_rx;

reg [3:0] dd_expected;
reg [2:0] debug_counter_expected;
reg  debug_done_expected;
reg [2:0] debug_i_expected;
reg  debug_load_expected;
reg [2:0] led_expected;
reg  ledr_expected;
reg  srgt_expected;

reg [3:0] dd_prev;
reg [2:0] debug_counter_prev;
reg  debug_done_prev;
reg [2:0] debug_i_prev;
reg  debug_load_prev;
reg [2:0] led_prev;
reg  ledr_prev;
reg  srgt_prev;

reg [3:0] dd_expected_prev;
reg [2:0] debug_counter_expected_prev;
reg  debug_done_expected_prev;
reg [2:0] debug_i_expected_prev;
reg  debug_load_expected_prev;
reg [2:0] led_expected_prev;
reg  ledr_expected_prev;
reg  srgt_expected_prev;

reg [3:0] last_dd_exp;
reg [2:0] last_debug_counter_exp;
reg  last_debug_done_exp;
reg [2:0] last_debug_i_exp;
reg  last_debug_load_exp;
reg [2:0] last_led_exp;
reg  last_ledr_exp;
reg  last_srgt_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	dd_prev = dd;
	debug_counter_prev = debug_counter;
	debug_done_prev = debug_done;
	debug_i_prev = debug_i;
	debug_load_prev = debug_load;
	led_prev = led;
	ledr_prev = ledr;
	srgt_prev = srgt;
end

// update expected /o prevs

always @(trigger)
begin
	dd_expected_prev = dd_expected;
	debug_counter_expected_prev = debug_counter_expected;
	debug_done_expected_prev = debug_done_expected;
	debug_i_expected_prev = debug_i_expected;
	debug_load_expected_prev = debug_load_expected;
	led_expected_prev = led_expected;
	ledr_expected_prev = ledr_expected;
	srgt_expected_prev = srgt_expected;
end


// expected led[ 2 ]
initial
begin
	led_expected[2] = 1'bX;
end 
// expected led[ 1 ]
initial
begin
	led_expected[1] = 1'bX;
end 
// expected led[ 0 ]
initial
begin
	led_expected[0] = 1'bX;
end 

// expected ledr
initial
begin
	ledr_expected = 1'bX;
end 
// expected dd[ 3 ]
initial
begin
	dd_expected[3] = 1'bX;
end 
// expected dd[ 2 ]
initial
begin
	dd_expected[2] = 1'bX;
end 
// expected dd[ 1 ]
initial
begin
	dd_expected[1] = 1'bX;
end 
// expected dd[ 0 ]
initial
begin
	dd_expected[0] = 1'bX;
end 
// expected debug_counter[ 2 ]
initial
begin
	debug_counter_expected[2] = 1'bX;
end 
// expected debug_counter[ 1 ]
initial
begin
	debug_counter_expected[1] = 1'bX;
end 
// expected debug_counter[ 0 ]
initial
begin
	debug_counter_expected[0] = 1'bX;
end 

// expected debug_done
initial
begin
	debug_done_expected = 1'bX;
end 
// expected debug_i[ 2 ]
initial
begin
	debug_i_expected[2] = 1'bX;
end 
// expected debug_i[ 1 ]
initial
begin
	debug_i_expected[1] = 1'bX;
end 
// expected debug_i[ 0 ]
initial
begin
	debug_i_expected[0] = 1'bX;
end 

// expected debug_load
initial
begin
	debug_load_expected = 1'bX;
end 

// expected srgt
initial
begin
	srgt_expected = 1'bX;
end 
// generate trigger
always @(dd_expected or dd or debug_counter_expected or debug_counter or debug_done_expected or debug_done or debug_i_expected or debug_i or debug_load_expected or debug_load or led_expected or led or ledr_expected or ledr or srgt_expected or srgt)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dd = %b | expected debug_counter = %b | expected debug_done = %b | expected debug_i = %b | expected debug_load = %b | expected led = %b | expected ledr = %b | expected srgt = %b | ",dd_expected_prev,debug_counter_expected_prev,debug_done_expected_prev,debug_i_expected_prev,debug_load_expected_prev,led_expected_prev,ledr_expected_prev,srgt_expected_prev);
	$display("| real dd = %b | real debug_counter = %b | real debug_done = %b | real debug_i = %b | real debug_load = %b | real led = %b | real ledr = %b | real srgt = %b | ",dd_prev,debug_counter_prev,debug_done_prev,debug_i_prev,debug_load_prev,led_prev,ledr_prev,srgt_prev);
`endif
	if (
		( dd_expected_prev[0] !== 1'bx ) && ( dd_prev[0] !== dd_expected_prev[0] )
		&& ((dd_expected_prev[0] !== last_dd_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dd[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dd_expected_prev);
		$display ("     Real value = %b", dd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dd_exp[0] = dd_expected_prev[0];
	end
	if (
		( dd_expected_prev[1] !== 1'bx ) && ( dd_prev[1] !== dd_expected_prev[1] )
		&& ((dd_expected_prev[1] !== last_dd_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dd[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dd_expected_prev);
		$display ("     Real value = %b", dd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dd_exp[1] = dd_expected_prev[1];
	end
	if (
		( dd_expected_prev[2] !== 1'bx ) && ( dd_prev[2] !== dd_expected_prev[2] )
		&& ((dd_expected_prev[2] !== last_dd_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dd[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dd_expected_prev);
		$display ("     Real value = %b", dd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dd_exp[2] = dd_expected_prev[2];
	end
	if (
		( dd_expected_prev[3] !== 1'bx ) && ( dd_prev[3] !== dd_expected_prev[3] )
		&& ((dd_expected_prev[3] !== last_dd_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dd[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dd_expected_prev);
		$display ("     Real value = %b", dd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dd_exp[3] = dd_expected_prev[3];
	end
	if (
		( debug_counter_expected_prev[0] !== 1'bx ) && ( debug_counter_prev[0] !== debug_counter_expected_prev[0] )
		&& ((debug_counter_expected_prev[0] !== last_debug_counter_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_counter[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_counter_expected_prev);
		$display ("     Real value = %b", debug_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_counter_exp[0] = debug_counter_expected_prev[0];
	end
	if (
		( debug_counter_expected_prev[1] !== 1'bx ) && ( debug_counter_prev[1] !== debug_counter_expected_prev[1] )
		&& ((debug_counter_expected_prev[1] !== last_debug_counter_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_counter[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_counter_expected_prev);
		$display ("     Real value = %b", debug_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_counter_exp[1] = debug_counter_expected_prev[1];
	end
	if (
		( debug_counter_expected_prev[2] !== 1'bx ) && ( debug_counter_prev[2] !== debug_counter_expected_prev[2] )
		&& ((debug_counter_expected_prev[2] !== last_debug_counter_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_counter[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_counter_expected_prev);
		$display ("     Real value = %b", debug_counter_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_debug_counter_exp[2] = debug_counter_expected_prev[2];
	end
	if (
		( debug_done_expected_prev !== 1'bx ) && ( debug_done_prev !== debug_done_expected_prev )
		&& ((debug_done_expected_prev !== last_debug_done_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_done :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_done_expected_prev);
		$display ("     Real value = %b", debug_done_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_debug_done_exp = debug_done_expected_prev;
	end
	if (
		( debug_i_expected_prev[0] !== 1'bx ) && ( debug_i_prev[0] !== debug_i_expected_prev[0] )
		&& ((debug_i_expected_prev[0] !== last_debug_i_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_i[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_i_expected_prev);
		$display ("     Real value = %b", debug_i_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_debug_i_exp[0] = debug_i_expected_prev[0];
	end
	if (
		( debug_i_expected_prev[1] !== 1'bx ) && ( debug_i_prev[1] !== debug_i_expected_prev[1] )
		&& ((debug_i_expected_prev[1] !== last_debug_i_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_i[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_i_expected_prev);
		$display ("     Real value = %b", debug_i_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_debug_i_exp[1] = debug_i_expected_prev[1];
	end
	if (
		( debug_i_expected_prev[2] !== 1'bx ) && ( debug_i_prev[2] !== debug_i_expected_prev[2] )
		&& ((debug_i_expected_prev[2] !== last_debug_i_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_i[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_i_expected_prev);
		$display ("     Real value = %b", debug_i_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_debug_i_exp[2] = debug_i_expected_prev[2];
	end
	if (
		( debug_load_expected_prev !== 1'bx ) && ( debug_load_prev !== debug_load_expected_prev )
		&& ((debug_load_expected_prev !== last_debug_load_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug_load :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_load_expected_prev);
		$display ("     Real value = %b", debug_load_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_debug_load_exp = debug_load_expected_prev;
	end
	if (
		( led_expected_prev[0] !== 1'bx ) && ( led_prev[0] !== led_expected_prev[0] )
		&& ((led_expected_prev[0] !== last_led_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_led_exp[0] = led_expected_prev[0];
	end
	if (
		( led_expected_prev[1] !== 1'bx ) && ( led_prev[1] !== led_expected_prev[1] )
		&& ((led_expected_prev[1] !== last_led_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_led_exp[1] = led_expected_prev[1];
	end
	if (
		( led_expected_prev[2] !== 1'bx ) && ( led_prev[2] !== led_expected_prev[2] )
		&& ((led_expected_prev[2] !== last_led_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port led[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", led_expected_prev);
		$display ("     Real value = %b", led_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_led_exp[2] = led_expected_prev[2];
	end
	if (
		( ledr_expected_prev !== 1'bx ) && ( ledr_prev !== ledr_expected_prev )
		&& ((ledr_expected_prev !== last_ledr_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ledr :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ledr_expected_prev);
		$display ("     Real value = %b", ledr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_ledr_exp = ledr_expected_prev;
	end
	if (
		( srgt_expected_prev !== 1'bx ) && ( srgt_prev !== srgt_expected_prev )
		&& ((srgt_expected_prev !== last_srgt_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port srgt :: @time = %t",  $realtime);
		$display ("     Expected value = %b", srgt_expected_prev);
		$display ("     Real value = %b", srgt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_srgt_exp = srgt_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab7part4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk50;
reg key0;
reg key1;
reg [2:0] sw;
// wires                                               
wire [3:0] dd;
wire [2:0] debug_counter;
wire debug_done;
wire [2:0] debug_i;
wire debug_load;
wire [2:0] led;
wire ledr;
wire srgt;

wire sampler;                             

// assign statements (if any)                          
lab7part4 i1 (
// port map - connection between master ports and signals/registers   
	.clk50(clk50),
	.dd(dd),
	.debug_counter(debug_counter),
	.debug_done(debug_done),
	.debug_i(debug_i),
	.debug_load(debug_load),
	.key0(key0),
	.key1(key1),
	.led(led),
	.ledr(ledr),
	.srgt(srgt),
	.sw(sw)
);

// clk50
initial
begin
	clk50 = 1'b1;
	# 20000;
	repeat(24)
	begin
		clk50 = 1'b0;
		clk50 = #20000 1'b1;
		# 20000;
	end
	clk50 = 1'b0;
end 

// key0
always
begin
	key0 = 1'b0;
	key0 = #10000 1'b1;
	#10000;
end 

// key1
initial
begin
	key1 = 1'b0;
	key1 = #20000 1'b1;
end 
// sw[ 2 ]
initial
begin
	sw[2] = 1'b1;
end 
// sw[ 1 ]
initial
begin
	sw[1] = 1'b1;
end 
// sw[ 0 ]
initial
begin
	sw[0] = 1'b1;
end 

lab7part4_vlg_sample_tst tb_sample (
	.clk50(clk50),
	.key0(key0),
	.key1(key1),
	.sw(sw),
	.sampler_tx(sampler)
);

lab7part4_vlg_check_tst tb_out(
	.dd(dd),
	.debug_counter(debug_counter),
	.debug_done(debug_done),
	.debug_i(debug_i),
	.debug_load(debug_load),
	.led(led),
	.ledr(ledr),
	.srgt(srgt),
	.sampler_rx(sampler)
);
endmodule

